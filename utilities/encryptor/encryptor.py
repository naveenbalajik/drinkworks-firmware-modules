from Crypto.Cipher import AES
from Crypto.Util.Padding import pad
import sys
import os.path
from argparse import ArgumentParser
import datetime
import binascii

plaintextCertPath = os.path.abspath(__file__)[:os.path.abspath(__file__).find('drinkworks-freertos')] + 'drinkworks-freertos\\docs\\credentials\\0ef4c1d74b-certificate.pem.crt'
plaintextPrivKeyPath = os.path.abspath(__file__)[:os.path.abspath(__file__).find('drinkworks-freertos')] + 'drinkworks-freertos\\docs\\credentials\\0ef4c1d74b-private.pem.key'
plaintextCodeSigningCertificatePath = os.path.abspath(__file__)[:os.path.abspath(__file__).find('drinkworks-freertos')] + 'drinkworks-freertos\\docs\\credentials\\code-signing-certificate.txt'

headerFileLocation = os.path.abspath(__file__)[:os.path.abspath(__file__).find('drinkworks-freertos')] + 'drinkworks-freertos\\modules\\credential_storage_utility\\include'

key = "96f7b4a90e3b2e6e76a8ba7d186caf666906753486650525dfdf0d2c4d80fbda"
iv = "5336eacc4b241f6a80f17bfcfba8deb1"

def encrypt(filename):
    try:
        f = open(filename)
        fileData = f.read()
    except:
        print "Unable to open file: " + filename + " Ensure filename uses the full system path"
        return

    print "---------- Input to encrypt ----------"
    print filename
    print fileData

    print "---------- Paramters ----------"
    print "Key(Hex): " + '0x' + ', 0x'.join([key[i:i+2] for i in range(0, len(key), 2)])
    print "IV(Hex): " + '0x' + ', 0x'.join([iv[i:i+2] for i in range(0, len(iv), 2)])
    print "Encryption Mode: AES CBC"
    print "Key Size: 256"

    print "---------- Encryption Output ----------"
    cipher = AES.new(key.decode('hex'), AES.MODE_CBC, IV=iv.decode('hex'))
    ciphertext = cipher.encrypt(pad(fileData, 16))
    print(ciphertext.encode('hex'))

    print "---------- Output for C storage ----------"
    cOutputWith0xIncluded = '0x' + ', 0x'.join([ciphertext.encode('hex')[i:i + 2] for i in range(0, len(ciphertext.encode('hex')), 2)])
    singleByteCharCount = 6
    cOutput = '\n'.join([cOutputWith0xIncluded[i:i + singleByteCharCount*16] for i in range(0, len(cOutputWith0xIncluded), singleByteCharCount*16)])
    print cOutput

    print "---------- Length of Ciphertext (Bytes) ----------"
    print len(ciphertext)

    return ciphertext, cOutput

def decrypt(ciphertextByteArray):
    cipher = AES.new(key.decode('hex'), AES.MODE_CBC, IV=iv.decode('hex'))
    print "---------- Decrypting using the following decryption paramters ----------"
    print "Key(Hex): " + ' '.join([key[i:i + 2] for i in range(0, len(key), 2)])
    print "IV(Hex): " + ' '.join([iv[i:i + 2] for i in range(0, len(iv), 2)])
    print "Decryption Mode: AES CBC"
    print "Key Size: 256"

    plaintext = cipher.decrypt(ciphertextByteArray)
    print "---------- Decrypted Output ----------"
    print plaintext


def outputToHfile(cOutputCertificate, outputFilename, absoluteOutputPath, noteString = ""):

    fileOutput = \
"""/**
 * @file %s
 *
 * %s
 * Created on: %s
 * Generated by utility located at \%s
 */
 
%s
""" % (outputFilename, noteString, datetime.datetime.now().strftime("%I:%M%p on %B %d, %Y"),  os.path.abspath(__file__)[os.path.abspath(__file__).find('drinkworks-freertos'):], cOutputCertificate)

    print "Storing encrypted hex output in header file: " + absoluteOutputPath
    with open(absoluteOutputPath + '/' + outputFilename, "w") as file:
        file.write(fileOutput)


def obfuscateString(inputString):
    obfuscatedOutput = []
    for i in range(0, len(inputString)):
        if (i % 4 == False):
            obfuscatedOutput.append('{0:02x}'.format(int(inputString[i], 16) ^ 0x8)[1])
        else:
            obfuscatedOutput.append(inputString[i])
    return ''.join(obfuscatedOutput)


def ObfuscatedCOutput(inputString):

    output = obfuscateString(inputString)
    return '0x' + ', 0x'.join([output[i:i+2] for i in range(0, len(output), 2)])


def main(args):
    if len(args) < 4:
        print 'Filepath for credentials not given. Using default paths. Certificate: ' + plaintextCertPath + ', Private Key: ' + plaintextPrivKeyPath + ', Code Signing Cert: ' + plaintextCodeSigningCertificatePath
        certFilepath = plaintextCertPath
        privkeyFilepath = plaintextPrivKeyPath
        codeSigningCertFilepath = plaintextCodeSigningCertificatePath
    elif len(args) == 4:
        print 'Running encryptor with filepaths: Certificate: ' + args[1] + ', Private Key: ' + args[2] + ', Code Signing Cert: ' + args[3]
        certFilepath = args[1]
        privkeyFilepath = args[2]
        codeSigningCertFilepath = args[3]
    else:
        print 'Error. Wrong number of input arguments. Enter one filepath as a argument or no arguments to use the default filepath'
        return

    # Encrypt Certificate
    ciphertextByteArrayCertificate, cOutputCertificate = encrypt(certFilepath)
    # decrypt(ciphertextByteArrayCertificate)

    # Encrypt Private Key
    ciphertextByteArrayPrivKey, cOutputPrivateKey = encrypt(privkeyFilepath)
    # decrypt(ciphertextByteArrayPrivKey)

    # Encrypt Code Signing Certificate
    ciphertextByteArrayCodeSign, cOutputCodeSign = encrypt(codeSigningCertFilepath)
    decrypt(ciphertextByteArrayCodeSign)

    # Obfuscated Key
    print'----------OBFUSCATED ENCRYPTION KEY C OUTPUT----------'
    cOutputkeyObfuscated = ObfuscatedCOutput(key)
    print cOutputkeyObfuscated
    print'----------OBFUSCATED ENCRYPTION IV C OUTPUT----------'
    cOutputIVObfuscated = ObfuscatedCOutput(iv)
    print cOutputIVObfuscated

    # Write to appropriate header files
    print'----------WRITING ENCRYPTED CERTIFICATE TO HEADER FILE----------'
    outputToHfile(cOutputCertificate, "encryptedCertificate.h", headerFileLocation)
    print'----------WRITING ENCRYPTED PRIVATE KEY TO HEADER FILE----------'
    outputToHfile(cOutputPrivateKey, "encryptedPrivateKey.h", headerFileLocation)
    print'----------WRITING CODE SIGNING CERTIFICATE TO HEADER FILE----------'
    outputToHfile(cOutputCodeSign, "encryptedCodeSigningCert.h", headerFileLocation)
    print'----------WRITING ENCRYPTED CERTIFICATE TO HEADER FILE----------'
    outputToHfile(cOutputkeyObfuscated, "obfuscatedEncryptionKey.h", headerFileLocation, "The key in this file is obfuscated by flipping the 7th bit of every other byte. The original key is:%s"%key)
    print'----------WRITING ENCRYPTED IV TO HEADER FILE----------'
    outputToHfile(cOutputIVObfuscated, "obfuscatedEncryptionIV.h", headerFileLocation, "The iv in this file is obfuscated by flipping the 7th bit of every other byte. The original iv is:%s"%iv)


if __name__ == "__main__":
    main(sys.argv)
